/*
  Copyright 2010 Obeo
  All rights reserved.  This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 1.0
  
  Any license can be applied to the files generated with this template.
*/

«EXTENSION org::eclipse::acceleo::benchmark::ecore2unittests::xpand::templates::common»

«DEFINE adapterFactoryTest FOR genmodel::GenPackage»
«FILE 'src-gen/' + testPackage(this).replaceAll('\\.', '/') + '/unit/' + prefix.toFirstUpper() + 'AdapterFactoryTest.java'»
package «testPackage(this) + '.unit'»;

import junit.framework.TestCase;

import «modelPackage(this)».«modelFactoryClassName(this)»;
import «modelPackage(this)».«modelPackageClassName(this)»;
import «modelPackage(this)».util.«modelAdapterFactoryClassName(this)»;
«FOREACH genClasses.ecoreClass().select(e | !((ecore::EClass)e).abstract) AS clazz»
import «modelPackage(this)».«clazz.name»;
«ENDFOREACH»

/*
 * TODO This is but a skeleton for the tests of «modelAdapterFactoryClassName(this)».
 * Set as "generated NOT" and override each test if you overrode the default generated
 * behavior.
 */
/**
 * Tests the behavior of the {@link «modelAdapterFactoryClassName(this)» generated adapter factory} for package «ecorePackage().name».
 *
 * @generated
 */
@SuppressWarnings("nls")
public class «modelAdapterFactoryClassName(this)»Test extends TestCase {
	«FOREACH genClasses.ecoreClass() AS eClass SEPARATOR '\n'»
	/**
	 * Ensures that creating adapters for {@link «eClass.name»} can be done through the AdapterFactory.
	 *
	 * @generated
	 */
	public void testCreate«eClass.name.toFirstUpper()»Adapter() {
		«modelAdapterFactoryClassName(this)» adapterFactory = new «modelAdapterFactoryClassName(this)»();
		assertNull(adapterFactory.create«eClass.name.toFirstUpper()»Adapter());
		«IF !eClass.abstract»
		assertNull(adapterFactory.createAdapter(«modelFactoryClassName(this)».eINSTANCE.create«eClass.name.toFirstUpper()»()));
		«ELSEIF !eClass.interface»
		assertNull(adapterFactory.createAdapter(new «eClass.qualifiedGeneratedImplementation()»(){}));
		«ENDIF»
	}
	«ENDFOREACH»
	
	/**
	 * Ensures that the AdapterFactory knows all classes of package «ecorePackage(this).name».
	 *
	 * @generated
	 */
	public void testIsFactoryForType() {
		«modelAdapterFactoryClassName(this)» adapterFactory = new «modelAdapterFactoryClassName(this)»();
		«FOREACH genClasses.ecoreClass().select(e | !((ecore::EClass)e).abstract) AS eClass»
		assertTrue(adapterFactory.isFactoryForType(«modelFactoryClassName(this)».eINSTANCE.create«eClass.name.toFirstUpper()»()));
		«ENDFOREACH»
		assertTrue(adapterFactory.isFactoryForType(«modelPackageClassName(this)».eINSTANCE));
		«IF ecorePackage(this).nsURI != 'http://www.eclipse.org/emf/2002/Ecore'»
		org.eclipse.emf.ecore.EClass eClass = org.eclipse.emf.ecore.EcoreFactory.eINSTANCE.createEClass();
		assertFalse(adapterFactory.isFactoryForType(eClass));
		«ENDIF»
		assertFalse(adapterFactory.isFactoryForType(new Object()));
	}
}
«ENDFILE»
«ENDDEFINE»