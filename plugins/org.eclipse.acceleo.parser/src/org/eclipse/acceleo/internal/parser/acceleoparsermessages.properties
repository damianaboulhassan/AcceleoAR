################################################################################
# Copyright (c) 2008, 2012 Obeo.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
# 
# Contributors:
#     Obeo - initial API and implementation
################################################################################
## note : apostrophes need to be doubled in these messages or they'll be ignored
# org.eclipse.acceleo.internal.parser.ast.ocl.environment
AcceleoEnvironmentFactory.IllegalParent = Parent environment must be an Acceleo environment: {0}.

# org.eclipse.acceleo.parser
IAcceleoParserProblemsConstants.MissingParenthesis = Parenthesis required on this expression
IAcceleoParserProblemsConstants.MissingCloseParenthesis = Closing parenthesis '')'' missing in expression
IAcceleoParserProblemsConstants.InvalidText = Invalid text
IAcceleoParserProblemsConstants.InvalidType = Invalid Type: 
IAcceleoParserProblemsConstants.InvalidIdentifier = Invalid identifier name: 
IAcceleoParserProblemsConstants.InvalidUrlType = Invalid URL Type: {0} should be String
IAcceleoParserProblemsConstants.InvalidExprType = Invalid Expression Type: {0} should be Boolean

AcceleoParser.ParseFiles = Parsing of {0} files
AcceleoParser.StartingBuild = Starting the build of the file {0}
AcceleoParser.ResolvingDependencies = Resolving dependencies for the file {0}
AcceleoParser.ParseFileCST = Create the concrete syntax of the file {0}
AcceleoParser.ParseFileAST = Create the abstract syntax of the file {0}
AcceleoParser.SaveAST = Save the abstract syntax of the file {0}
AcceleoParser.Error.FileSaving = An error occured while saving {0} : {1}
AcceleoParser.Error.InvalidAST = Invalid AST for {0}
AcceleoParser.Warning.TextBetweenCommentAndModule = You can only define comment blocks before the module.
AcceleoParser.Warning.MultipleOverrides = Although the OMG specification authorizes a template to override multiple templates, Acceleo will only handle the first overridden template.
AcceleoParser.Warning.MultipleExtends = Although the OMG specification authorizes a module to extend multiple modules, Acceleo will only handle the first extended module.
AcceleoParser.Info.TemplateOverride = Template ''{0}'' overrides template ''{1}''.
AcceleoParser.CircularDependency = A circular dependency exists between {0} and {1} thus the module {0} will fail to compile correctly.
AcceleoParser.NotFullyCompliant = Strict MTL compliance - You have checked the strict standard compliance of the Acceleo Compiler but you use an operation of the non-standard library ''{0}''.

# org.eclipse.acceleo.parser.ast
CST2ASTConverter.SignatureConflict = The module element {0} already exists.
CST2ASTConverterWithResolver.TextAfterProtectedAreaMarker = There is some text after the protected area in the same line. It will create an invalid marker for the protected area.
CST2ASTConverterWithResolver.MissingModule = Module {0} not found.
CST2ASTConverterWithResolver.RecursiveModuleExtends = Module ''{0}'' has recursive extends via module ''{1}''.
CST2ASTConverterWithResolver.MissingTemplate = No public template ''{0}'' found.
CST2ASTConverterWithResolver.UnavailableClause = The ''{0}'' clause is only available on template invocation.
CST2ASTConverterWithResolver.InvalidClause = The ''{0}'' requires an ''{1}'' definition on the template.
CST2ASTConverterWithResolver.ProtectedAreaConflict = Several protected areas cannot use the same identifier.
CST2ASTConverterWithResolver.DeprecatedModule = The module ''{0}'' is deprecated
CST2ASTConverterWithResolver.DeprecatedQuery = The query ''{0}'' is deprecated
CST2ASTConverterWithResolver.DeprecatedTemplate = The template ''{0}'' is deprecated
CST2ASTConverterWithResolver.DeprecatedMacro = The macro ''{0}'' is deprecated
CST2ASTConverterWithResolver.ProtectedAreaMissingIdentifier = A protected area must have an identifier.
CST2ASTConverterWithResolver.IncompatibleComparison = Incompatible types, comparison impossible: ''{0} = {1}''.
CST2ASTConverterWithResolver.ModuleAlreadyExtends = The module already extends ''{0}''
CST2ASTConverterWithResolver.ModuleAlreadyImports = The module already imports ''{0}''
CST2ASTConverterWithResolver.ModuleAlreadyUsesMetaModels = The module already uses this metamodel.
CST2ASTConverterWithResolver.ModuleExtendssIncompatibleModule = The module has no common metamodel with this imported module: ''{0}''
CST2ASTConverterWithResolver.RecursiveModuleImports = Module ''{0}'' has recursive imports via module ''{1}''.
CST2ASTConverterWithResolver.PossibleIncompatible = Possible incompatible type between ''{0}'' and ''{1}''.
CST2ASTConverterWithResolver.ProtectedAreaMissingIdentifier = A protected area must have an identifier.
CST2ASTConverterWithResolver.OverrideTemplateInSameModule = A template cannot override another template in the same module.
CST2ASTConverterWithResolver.TemplateAlreadyOverride = The template already overrides ''{0}''
CST2ASTConverterWithResolver.ServiceInQueryReturningAString = It is strongly recommended not to return directly a String from a Java service in a query taking a primitive as its first parameter in order to ensure the precision of the traceability of each text region generated. 
CST2ASTConverterWithResolver.ServiceInTemplate = It is strongly recommended to use Java services only inside a query in order to ensure the precision of the traceability informations.
CST2ASTConverterWithResolver.InvalidModelExpression = The model expression does not seem to have been successfully compiled.  

# org.eclipse.acceleo.parser.cst
## keys uses by both parser and block parser
Parser.MissingCharacter = ''{0}'' character is missing

CSTParser.InvalidStatementHeader = {0} header isn''t closed
CSTParser.InvalidStatement = {0} body isn''t terminated
CSTParser.EmptyBuffer = Missing [module] definition
CSTParser.MissingModule = The module is required
CSTParser.MissingModuleEnd = The module isn''t closed
CSTParser.MissingMetamodel = The metamodel is required
CSTParser.InvalidModuleDefinition = Module ''{0}'' must be defined in its own file
CSTParser.MetamodelNotFound = The metamodel couldn''t be resolved
CSTParser.InvalidModel = Model content is invalid
CSTParser.InvalidModuleElement = Module element is not valid
CSTParser.InvalidQuery = A query shouldn''t have a body section defined
CSTParser.MissingClosingBracket = Closing bracket missing for init section
CSTParser.InvalidVariable = The variable ''{0}'' isn''t valid
CSTParser.InvalidLetVariable = The variable ''{0}'' is not valid to initialize a let block, it is missing an initializing expression, example: ''[let (var : Type = expr)][/let]''
CSTParser.DuplicatedVariable = The variable ''{0}'' is duplicated
CSTParser.InvalidVisibilityOfMainTemplate = Templates with a @main annotation should have a public visibility
CSTParser.InvalidModuleName = A module should not be named ''{0}''. This name is an Acceleo or OCL keyword.
CSTParser.InvalidQueryName = A query should not be named ''{0}''. This name is an Acceleo or OCL keyword.
CSTParser.InvalidTemplateName = A template should not be named ''{0}''. This name is an Acceleo or OCL keyword.
CSTParser.InvalidMacroName = A macro should not be named ''{0}''. This name is an Acceleo or OCL keyword.
CSTParser.InvalidVariableName = A variable should not be named ''{0}''. This name is an Acceleo or OCL keyword.
CSTParser.MissingVisibility = A module element should have an explicit visibility (public, protected or private).
CSTParser.MissingParameters = Since traceability informations need to be attached to a model element, it is strongly recommended to have at least one parameter (e.g. traceabilityContext : OclAny).
CSTParser.UnqualifiedImport = To prevent invalid resolution, import definition should use the qualified name of the module (packa::packb::packc::packd::module).
CSTParser.UnqualifiedExtend = To prevent invalid resolution, extend definition should use the qualified name of the module (packa::packb::packc::packd::module).

CSTParserBlock.InvalidBlockHeader = ''{0}'' block header isn''t closed
CSTParserBlock.InvalidBlock = ''{0}'' block body isn''t terminated
CSTParserBlock.MissingFileMode = The open mode is missing : ''true'' (append) or ''false'' (overwrite)
CSTParserBlock.InvalidInvocation = The invocation isn''t terminated
CSTParserBlock.EmptyFileName = The name of the file generated cannot be empty

AcceleoMainCompiler.NotEnoughParameters = There are not enough parameters: source folder (string), output folder (string), dependencies (string), binary resource (boolean)

AcceleoCompilationTask.CompilationIssues = Problems encountered while compiling expression
